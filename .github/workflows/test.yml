# 프로덕션 테스트용 워크플로우 이름
name: Run Tests to AWS ECS - discodeit

on:
  pull_request:
    branches: [main]  # main 브랜치로 PR이 생성되거나 업데이트될 때 트리거됩니다.

jobs:
  test-discodeit:  # Job의 식별자. 여러 job을 정의할 수도 있습니다.
    # GitHub Actions UI에서 표시될 작업 이름
    name: Run Tests
    runs-on: ubuntu-latest  # GitHub에서 제공하는 가상환경 중 하나를 선택합니다. 이 경우 최신 Ubuntu LTS가 사용됩니다.
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: discodeit
          POSTGRES_USER: discodeit_user
          POSTGRES_PASSWORD: discodeit1234
        options: >-
          --health-cmd="pg_isready -U discodeit_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1단계: 소스코드 체크아웃
      - name: Checkout code  # 저장소 코드를 가져옵니다.
        uses: actions/checkout@v4  # GitHub에서 공식 제공하는 체크아웃 액션입니다.

      # 2단계: Java 17 개발 환경 설정
      - name: Set up JDK 17  # Java 개발 환경을 설정합니다.
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # OpenJDK를 배포하는 Temurin(Azul) 사용
          java-version: '17'  # Java 17 사용 (Spring Boot 3.x 권장 버전)

      - name: Cache Gradle packages  # 의존성 캐싱으로 빌드 속도 향상
        uses: actions/cache@v3  # GitHub이 제공하는 캐시 액션
        with:
          path: |  # 캐시 대상으로 지정할 디렉토리 목록
            ~/.gradle/caches        # 의존성 캐시
            ~/.gradle/wrapper       # Gradle 버전 캐시
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle  # gradlew에 실행 권한 부여
        run: chmod +x gradlew

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/reports/jacoco/test/jacocoTestReport.xml
          fail_ci_if_error: true
