name: Deploy to AWS ECS(CD)

on:
  push:
    branches: [ release ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_URI: public.ecr.aws/m8n4t4p5/discodeit
  ECR_REPOSITORY: discodeit
  ECS_SERVICE: discodeit-service
  ECS_CLUSTER: discodeit-cluster

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Configure AWS credentials for Public ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

          docker build -t $ECR_REPOSITORY_URI:latest -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load task definition from repo
        run: cp task-definition.json new-task-def.json

      - name: Update image in task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REPOSITORY_URI:$IMAGE_TAG
          cat new-task-def.json | jq --arg img_uri "$IMAGE_URI" \
            '(.containerDefinitions[0].image) = $img_uri' > final-task-def.json

      - name: Prepare final task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REPOSITORY_URI:$IMAGE_TAG

          jq --arg img_uri "$IMAGE_URI" '
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            ) |
            .containerDefinitions[0].image = $img_uri
          ' task-definition.json > final-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          arn=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "task_def_arn=$arn" >> $GITHUB_OUTPUT

      - name: Stop existing ECS service temporarily
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Deploy new task definition to ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.register-task.outputs.task_def_arn }} \
            --desired-count 1
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Clean up old ECR Public images (keep only 'latest')
        env:
          ECR_REPOSITORY_URI: ${{ env.ECR_REPOSITORY_URI }}
        run: |
          REPO_NAME=$(echo $ECR_REPOSITORY_URI | awk -F'/' '{print $NF}')
          ECR_PUBLIC_REGION="us-east-1"

          LATEST_IMAGE_DIGEST=$(aws ecr-public describe-images \
            --region $ECR_PUBLIC_REGION \
            --repository-name $REPO_NAME \
            --query 'imageDetails[?imageTags != null && contains(imageTags, `latest`)].[imageDigest]' \
            --output text | head -n 1)

          if [ -z "$LATEST_IMAGE_DIGEST" ]; then
            exit 0
          fi

          ALL_IMAGE_DETAILS=$(aws ecr-public describe-images \
            --region $ECR_PUBLIC_REGION \
            --repository-name $REPO_NAME \
            --query 'imageDetails[*].[imageDigest,imageTags[]]' \
            --output json)

          IMAGES_TO_DELETE=$(echo "$ALL_IMAGE_DETAILS" | jq -r --arg LATEST_DIGEST "$LATEST_IMAGE_DIGEST" \
            '[.[] | select(.[0] != $LATEST_DIGEST) | .[0]] | unique | .[]')

          if [ -n "$IMAGES_TO_DELETE" ]; then
            echo "$IMAGES_TO_DELETE" | xargs -I {} aws ecr-public batch-delete-image \
              --region $ECR_PUBLIC_REGION \
              --repository-name $REPO_NAME \
              --image-ids imageDigest={}
          fi
