name: CD Test

on:
  push:
    branches: [ "release" ]

env:
  AWS_REGION_PUBLIC: us-east-1
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  ECR_REPOSITORY: discodeit
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: discodeit-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Docker image push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_PUBLIC }}

      - name: Login to Amazon ECR public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build Docker image
        id: build-image
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
          docker build -t ${{ env.ECR_REPOSITORY_URI }}:latest -t ${{ env.ECR_REPOSITORY_URI}}:${IMAGE_TAG}

      - name: Delete old images (latest + dangling)
        run: |
          echo "Deleting 'latest' tagged image..."
          aws ecr-public batch-delete-image \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids imageTag=latest || true

          echo "Finding dangling images (no tags)..."
          dangling=$(aws ecr-public list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'imageIds[?imageTag==null]' \
            --output json)

          echo "Dangling images: $dangling"

          if [ "$dangling" != "[]" ]; then
            echo "$dangling" | jq -c '.[]' | while read image; do
              echo "Deleting image: $image"
              aws ecr-public batch-delete-image \
                --repository-name discodeit \
                --image-ids "$image" || true
            done
          else
            echo "No dangling images to delete."
          fi

      - name: Push Docker images
        run: |
          docker push $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:${IMAGE_TAG}

  deploy:
    name: Update ECS Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Task Definition
        id: task-def
        run: |
          NEW_IMAGE="$ECR_REPOSITORY_URI:$IMAGE_TAG"
          
          # 현재 태스크 정의 JSON을 받아와서 새 이미지로 교체
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query "taskDefinition" > taskdef.json
          
          # 새 이미지 태그로 교체
          jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image=$IMAGE' \
            taskdef.json > new-taskdef.json
          
          # 불필요한 필드 제거
          jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            new-taskdef.json > final-taskdef.json
          
          # 새 태스크 정의 등록
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-taskdef.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Scale down ECS service (프리티어 리소스 고려)
        run: |
          echo "Scaling down ECS service to 0 tasks..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0
          sleep 10
          
      - name: Start ECS service
        run: |
          echo "Updating ECS service to new task definition..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1