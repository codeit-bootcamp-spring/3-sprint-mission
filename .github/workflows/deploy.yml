name: Deploy to AWS ECS

on:
  push:
    branches: [ release ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
  # 배포 작업 정의
  deploy:
    # GitHub Actions UI에서 표시될 작업 이름
    name: Deploy
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest

    # 배포 작업의 실행 단계들
    steps:
      # 1단계: 소스코드 체크아웃
      - name: Checkout
        # GitHub Actions 서버에서 제공하는 소스코드 체크아웃 액션 사용
        uses: actions/checkout@v3

      # 2단계: Java 17 개발 환경 설정
      - name: Set up JDK 17
        # GitHub Actions 서버에서 제공하는 JDK 설정 액션 사용
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3단계: AWS 자격 증명 설정
      - name: Configure AWS credentials
        # GitHub Actions 서버에서 제공하는 AWS 자격 증명 설정 액션 사용
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # 4단계: Amazon ECR 퍼블릭 로그인
      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin public.ecr.aws

      # 5단계: Docker 이미지 빌드 및 ECR 퍼블릭에 업로드
      - name: Build, tag, and push image to Amazon ECR
        # 이 단계의 출력값을 다른 단계에서 사용하기 위한 ID 설정
        id: build-image
        # 이 단계에서만 사용할 환경 변수 정의
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # gradlew 실행 권한 부여 및 빌드
          chmod +x ./gradlew
          ./gradlew bootJar
          
          # Docker 이미지 빌드 및 태그
          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ env.ECR_REPOSITORY }}:latest .
          
          # Docker 이미지 ECR 퍼블릭에 업로드
          docker push ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPOSITORY }}:latest
          
          # 출력값으로 이미지 URL 전달
          echo "image=${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 6단계: 태스크 정의 파일에서 컨테이너 이미지 정보 업데이트
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: discodeit-app
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}

      # 7단계: 기존 ECS 서비스 일시 중단
      - name: Stop existing ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0

      # 8단계: ECS 서비스에 새 태스크 정의로 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true  # 배포 완료까지 기다림
