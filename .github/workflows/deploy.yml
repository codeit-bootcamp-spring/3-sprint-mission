name: CD - Deploy to ECS

on:
  # release 브랜치에 push될 때 워크플로우 실행
  push:
    branches: [release]

env:
  # AWS 및 ECS 관련 환경 변수 (GitHub Variables에서 관리)
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # JDK 17 환경 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      # AWS 인증 (Public ECR용, 리전: us-east-1)
      - name: Login to AWS (Public ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Public ECR에 Docker 로그인
      - name: Login to Amazon ECR (Public)
        run: |
          aws ecr-public get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin $ECR_REPOSITORY_URI

      # Docker 이미지 빌드 및 푸시, 이미지 태그는 latest와 커밋 해시
      - name: Build and push Docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_URI:latest -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # AWS 인증 (ECS 작업용, 리전: AWS_REGION)
      - name: Configure AWS credentials (ECS)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 태스크 정의 파일에서 컨테이너 이미지 정보를 새 이미지로 업데이트
      - name: Render new ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      # 프리티어 절약을 위해 서비스 중단
      - name: Stop running ECS tasks (프리티어 절약)
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --desired-count 0
          sleep 30

      # 새 태스크 정의로 서비스 재시작
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true