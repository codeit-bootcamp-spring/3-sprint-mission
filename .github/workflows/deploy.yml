name: Deploy to AWS ECS

on:
  push:
    branches: [ release ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ env.ECR_REPOSITORY }}:latest .
          docker push ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPOSITORY }}:latest

          echo "image=${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: discodeit-app
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}

      - name: Stop existing ECS service (desired-count 0)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0 \
            --region ${{ env.AWS_REGION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Restart ECS service (desired-count 1)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 1 \
            --region ${{ env.AWS_REGION }}
