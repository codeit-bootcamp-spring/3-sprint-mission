version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PROJECT_NAME: ${PROJECT_NAME}
        PROJECT_VERSION: ${PROJECT_VERSION}
    container_name: discodeit-app
    ports:
      - "${APP_PORT:-8081}:${SERVER_PORT:-80}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - STORAGE_TYPE=local
      - JVM_OPTS=${JVM_OPTS}
    volumes:
      - binary-content:/app/storage
    # PostgreSQL 서비스가 건강한 상태가 된 후 시작
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17
    container_name: discodeit-db
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-discodeit}
      - POSTGRES_USER=${POSTGRES_USER:-discodeit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-discodeit1234}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - TZ="Asia/Seoul"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    # 헬스체크 설정
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-discodeit_user} -d ${POSTGRES_DB:-discodeit}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  binary-content:
  postgres-data:



