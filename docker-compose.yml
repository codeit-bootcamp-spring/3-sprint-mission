version: "3.8"

services:
  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:15-alpine
    container_name: discodeit-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - discodeit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 애플리케이션 서비스
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: discodeit:local-slim # 빌드 후 local-slim 태그로 생성
    container_name: discodeit-app
    environment:
      SPRING_PROFILES_ACTIVE: dev # 개발 환경용
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SERVER_PORT: ${APP_INTERNAL_PORT:-80}
      JVM_OPTS: ${JVM_OPTS:-}
      # Storage Configuration
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_LOCAL_ROOT_PATH: ${STORAGE_LOCAL_ROOT_PATH:-storage}
      # AWS S3 Configuration
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_PRESIGNED_URL_EXPIRATION: ${AWS_S3_PRESIGNED_URL_EXPIRATION:-600}
    ports:
      - "${APP_EXTERNAL_PORT:-8081}:${APP_INTERNAL_PORT:-80}"
    volumes:
      - .discodeit/storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - discodeit-network
    restart: unless-stopped

# 볼륨 정의
volumes:
  postgres_data:
    driver: local

# 네트워크 정의
networks:
  discodeit-network:
    driver: bridge
