spring:
  application:
    name: discodeit

  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB # 한 번에 최대 업로드 가능 용량

  datasource:
  # 환경별로 오버라이드
  # url: jdbc:postgresql://localhost:5432/discodeit
  # username: ${USER_NAME}
  # password: ${USER_PASSWORD}

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        generate_statistics: true
        default_batch_fetch_size: 100
        format_sql: false
        show_sql: false

discodeit:
  storage:
    type: ${STORAGE_TYPE:local} # local | s3 (기본값: local)
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)

decorator:
  datasource:
    p6spy:
      enable-logging: true

logging:
  level:
    root: info
    com.sprint.mission: info

info:
  app:
    name: discodeit
    version: 1.7.0
    java:
      version: 17
    spring-boot:
      version: 3.4.4
  datasource:
    url: ${spring.datasource.url:unknown}
    driver-class-name: ${spring.datasource.driver-class-name:unknown}
  jpa:
    ddl-auto: ${spring.jpa.hibernate.ddl-auto:unknown}
  storage:
    type: ${discodeit.storage.type:unknown}
    path: ${discodeit.storage.local.root-path:unknown}
  multipart:
    max-file-size: ${spring.servlet.multipart.maxFileSize:unknown}
    max-request-size: ${spring.servlet.multipart.maxRequestSize:unknown}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loggers
# 기본값 외 실제 또는 추가 설정은 프로필 설정에서 오버라이드.
