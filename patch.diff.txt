diff --git a/src/main/java/com/sprint/mission/discodeit/service/basic/BasicMessageService.java b/src/main/java/com/sprint/mission/discodeit/service/basic/BasicMessageService.java
--- a/src/main/java/com/sprint/mission/discodeit/service/basic/BasicMessageService.java
+++ b/src/main/java/com/sprint/mission/discodeit/service/basic/BasicMessageService.java
@@ -1,6 +1,8 @@
 package com.sprint.mission.discodeit.service.basic;

+import java.util.UUID;
+import java.util.stream.Collectors;
 import javax.transaction.Transactional;
 import org.springframework.stereotype.Service;
 import org.springframework.web.multipart.MultipartFile;
@@ -48,13 +50,18 @@ public class BasicMessageService implements MessageService {
     Channel channel = channelRepository.findById(req.channelId())
         .orElseThrow(() -> new NotFoundException("Channel", req.channelId().toString()));
     User author = userRepository.findById(req.authorId())
         .orElseThrow(() -> new NotFoundException("Author", req.authorId().toString()));
-    Message m = new Message();
-    m.setContent(req.content());
-    m.setChannel(channel);
-    m.setUser(author);
+    // Builder 패턴으로 엔티티 생성
+    Message m = Message.builder()
+        .content(req.content())
+        .channel(channel)
+        .author(author)
+        .build();

     // 첨부파일 처리
     if (attachments != null && attachments.length > 0) {
       for (MultipartFile file : attachments) {
-        BinaryContent bc = new BinaryContent();
-        bc.setFileName(file.getOriginalFilename());
-        bc.setSize(file.getSize());
-        bc.setContentType(file.getContentType());
+        // 메타 정보만 저장, 실 데이터는 스토리지에
+        BinaryContent bc = BinaryContent.builder()
+            .id(UUID.randomUUID())
+            .fileName(file.getOriginalFilename())
+            .size(file.getSize())
+            .contentType(file.getContentType())
+            .build();
+        binaryContentStorage.put(bc.getId(), file.getBytes());
+        binaryContentRepository.save(bc);
+        m.addAttachment(bc);
       }
     }
     messageRepository.save(m);
@@ -71,7 +78,7 @@ public class BasicMessageService implements MessageService {
   @Transactional
   public MessageDto update(UUID messageId, MessageUpdateRequest req) {
     Message m = messageRepository.findById(messageId)
         .orElseThrow(() -> new NotFoundException("Message", messageId.toString()));
-    m.setContent(req.newContent());
+    m.updateContent(req.newContent());
     return MessageDto.from(m);
   }
